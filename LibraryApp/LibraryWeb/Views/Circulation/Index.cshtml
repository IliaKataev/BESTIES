@model dynamic
@{
    ViewBag.Title = "Circulation";
}

<h2>Circulation</h2>

<div style="display:flex; gap:20px;">
    <!-- Customer Panel -->
    <div style="width:300px; border:1px solid #ccc; padding:10px;">
        <h4>Customer</h4>
        <input type="text" id="customer-id" placeholder="Enter customer ID" class="form-control" />
        <button id="load-customer" class="btn btn-primary mt-2">Load Circulation</button>
        <div id="customer-info" class="mt-2"></div>
        <button id="edit-customer" class="btn btn-secondary mt-2" disabled>Edit...</button>
    </div>

    <!-- Issue / Return Panel -->
    <div style="flex:1;">
        <h4>Issue / Return</h4>
        <input type="text" id="book-key" placeholder="Enter book ID" class="form-control" />
        <div id="book-title" class="mt-1"></div>
        <button id="issue-btn" class="btn btn-success mt-1" disabled>Issue</button>
        <button id="return-btn" class="btn btn-warning mt-1" disabled>Return</button>
        <button id="renew-btn" class="btn btn-info mt-1" disabled>Renew</button>

        <h4 class="mt-3">Current Issues</h4>
        <table class="table table-striped" id="current-issues-table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Date of Issue</th>
                    <th>Return Until</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>

        <h4 class="mt-3">History</h4>
        <table class="table table-striped" id="history-table">
            <thead>
                <tr>
                    <th>Title</th>
                    <th>Date of Issue</th>
                    <th>Return Date</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        const apiBase = "https://localhost:7055/api/issues";
        let selectedCustomer = null;
        let selectedCustomerData = null;
        let activeIssues = [];
        let historyIssues = [];
        let selectedIssue = null;

        const bookInput = document.getElementById("book-key");
        const issueBtn = document.getElementById("issue-btn");
        const returnBtn = document.getElementById("return-btn");
        const renewBtn = document.getElementById("renew-btn");

        // --- Load customer ---
        document.getElementById("load-customer").addEventListener("click", async () => {
            const customerId = parseInt(document.getElementById("customer-id").value);
            if (!customerId) { alert("Enter valid Customer ID"); return; }

            const res = await fetch(`${apiBase}/customer/${customerId}`);
            if (!res.ok) { alert(`Customer not found (HTTP ${res.status})`); return; }
            const data = await res.json();

            selectedCustomer = customerId;
            selectedCustomerData = data.customer;
            activeIssues = data.currentIssues;
            historyIssues = data.history;

            const infoDiv = document.getElementById("customer-info");
                infoDiv.innerHTML = `
                    <div class="card p-2" style="border-radius:8px; background-color:#f8f9fa;">
                        <div><strong>ID:</strong> ${customerId}</div>
                        <div><strong>Name:</strong> ${data.customer.name}</div>
                        <div><strong>Email:</strong> ${data.customer.email}</div>
                    </div>
                `;

            populateActiveIssues();
            populateHistory();
            updateBookButtons();
        });

        // --- Populate tables ---
        function populateActiveIssues() {
            const tbody = document.querySelector("#current-issues-table tbody");
            tbody.innerHTML = "";
            const now = new Date();
            activeIssues.forEach(issue => {
                const tr = document.createElement("tr");
                tr.dataset.issueId = issue.issueid;
                const returnDate = new Date(issue.returnUntil);
                const overdue = (now - returnDate)/(1000*60*60*24) > 21;
                tr.innerHTML = `
                    <td>${issue.bookTitle}</td>
                    <td>${new Date(issue.dateOfIssue).toLocaleDateString()}</td>
                    <td style="color:${overdue?'red':'black'}">${returnDate.toLocaleDateString()}</td>
                `;
                tr.addEventListener("click", () => selectIssue(issue.issueid));
                tbody.appendChild(tr);
            });
        }

        function populateHistory() {
            const tbody = document.querySelector("#history-table tbody");
            tbody.innerHTML = "";
            historyIssues.forEach(issue => {
                const tr = document.createElement("tr");
                tr.innerHTML = `
                    <td>${issue.bookTitle}</td>
                    <td>${new Date(issue.dateOfIssue).toLocaleDateString()}</td>
                    <td>${issue.returnDate?new Date(issue.returnDate).toLocaleDateString():""}</td>
                `;
                tbody.appendChild(tr);
            });
        }

                // --- Select issue in table ---
        function selectIssue(issueId) {
            selectedIssue = activeIssues.find(i => i.issueid == issueId);

            document.querySelectorAll("#current-issues-table tbody tr").forEach(tr => {
                tr.classList.remove("table-active");
            });

            const selectedRow = document.querySelector(`#current-issues-table tbody tr[data-issue-id='${issueId}']`);
            if (selectedRow) selectedRow.classList.add("table-active");

            returnBtn.disabled = false;
            const daysSinceIssue = (new Date() - new Date(selectedIssue.dateOfIssue)) / (1000*60*60*24);
            renewBtn.disabled = !(daysSinceIssue > 21);
        }


        const apiBookBase = "https://localhost:7055/api/books";
        bookInput.addEventListener("keypress", async e => {
            if (e.key !== "Enter") return;

            const bookKey = bookInput.value.trim();
            if (!bookKey) return;

            try {
                const res = await fetch(`${apiBookBase}/${bookKey}`);
                if (!res.ok) throw new Error("Book not found");

                const book = await res.json();
                document.getElementById("book-title").innerText = `Book: ${book.title}`;

                const alreadyIssued = activeIssues.some(i => i.bookKey === bookKey);
                issueBtn.disabled = !selectedCustomer || alreadyIssued;

            } catch {
                document.getElementById("book-title").innerText = "Book not found";
                issueBtn.disabled = true;
            }
        });







        // --- Issue ---
        issueBtn.addEventListener("click", async () => {
            const bookKey = bookInput.value.trim();
            if (!selectedCustomer || !bookKey) return;

            const returnDate = new Date();
            returnDate.setDate(returnDate.getDate()+14);

            const res = await fetch(`${apiBase}/issue`, {
                method: "POST",
                headers: {"Content-Type":"application/json"},
                body: JSON.stringify({CustomerId:selectedCustomer, BookKey:bookKey, ReturnUntil:returnDate.toISOString().split("T")[0]})
            });
            if (!res.ok) { alert("Error issuing book"); return; }

            const issuedBook = await res.json();
            activeIssues.push(issuedBook);
            populateActiveIssues();
            bookInput.value = "";
            document.getElementById("book-title").innerText = "";
            issueBtn.disabled = true;
        });

        // --- Return ---
        returnBtn.addEventListener("click", async () => {
            if (!selectedIssue) return;
            const res = await fetch(`${apiBase}/return/${selectedIssue.issueid}`, {method:"POST"});
            if (!res.ok) { alert("Error returning book"); return; }

            selectedIssue.returnDate = new Date().toISOString();
            historyIssues.unshift(selectedIssue);
            activeIssues = activeIssues.filter(i => i.issueid != selectedIssue.issueid);
            selectedIssue = null;
            returnBtn.disabled = true;
            renewBtn.disabled = true;
            populateActiveIssues();
            populateHistory();
        });

        // --- Renew ---
        renewBtn.addEventListener("click", async () => {
            if (!selectedIssue) return;
            const res = await fetch(`${apiBase}/renew/${selectedIssue.issueid}`, {method:"POST"});
            if (!res.ok) { alert("Cannot renew book"); return; }

            const renewed = await res.json();
            selectedIssue.returnUntil = renewed.returnuntil;
            populateActiveIssues();
            alert("Book renewed!");
        });

        // --- Update book buttons ---
        function updateBookButtons() {
            const bookKey = bookInput.value.trim();
            const alreadyIssued = activeIssues.some(i => i.bookKey === bookKey);
            issueBtn.disabled = !selectedCustomer || !bookKey || alreadyIssued;
        }
    </script>
}
